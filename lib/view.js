// Generated by CoffeeScript 1.3.1
(function() {
  var TAB_SPACES, coffee, errorHandler, parser, states, utils, view, vm;

  parser = require('./toffee_lang').parser;

  errorHandler = require('./errorHandler').errorHandler;

  states = require('./consts').states;

  utils = require('./utils');

  vm = require('vm');

  try {
    coffee = require("iced-coffee-script");
  } catch (e) {
    coffee = require("coffee-script");
  }

  TAB_SPACES = 2;

  view = (function() {

    view.name = 'view';

    function view(txt, options) {
      options = options || {};
      this.fileName = (options.fileName || options.filename) || null;
      this.identifier = options.indentifier || "pub";
      this.codeObj = null;
      this.coffeeScript = null;
      this.javaScript = null;
      this.scriptObj = null;
      this.error = null;
      this.loadFromText(txt);
    }

    view.prototype.loadFromText = function(txt) {
      this.txt = txt;
      this._cleanTabs(this.txt);
      try {
        this.codeObj = parser.parse(txt);
        return this._cleanTabs(this.codeObj);
      } catch (e) {
        return this.error = errorHandler.generateParseError(this, e);
      }
    };

    view.prototype._cleanTabs = function(obj) {
      /*
          replaces tabs with spaces in their coffee regions
      */

      var item, _i, _len, _ref, _ref1, _results;
      if ((_ref = obj[0]) === "INDENTED_TOFFEE_ZONE" || _ref === "TOFFEE_ZONE" || _ref === "COFFEE_ZONE") {
        _ref1 = obj[1];
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          item = _ref1[_i];
          _results.push(this._cleanTabs(item));
        }
        return _results;
      } else if (obj[0] === "COFFEE") {
        return obj[1] = obj[1].replace(/\t/g, this._tabAsSpaces());
      }
    };

    view.prototype.run = function(options) {
      /*
          returns [err, str]
      */

      var err, pp, res, sandbox, script;
      script = this._toScriptObj();
      err = null;
      if (this.error) {
        console.log(this.error.converted_msg);
        return [errorHandler.prettyPrintError(this, null)];
      } else {
        try {
          sandbox = {
            __toffee_run_input: options
          };
          script.runInNewContext(sandbox);
          res = sandbox.__toffee_run_input.__toffee.res;
          delete sandbox.__toffee_run_input.__toffee;
        } catch (e) {
          this.error = errorHandler.generateRuntimeError(this, e);
          console.log(this.error.converted_msg);
          pp = errorHandler.prettyPrintError(this);
          return [pp, null];
        }
        return [err, res];
      }
    };

    view.prototype._toScriptObj = function() {
      var d, txt;
      if (!((this.scriptObj != null) || (this.error != null))) {
        txt = this._toJavaScript();
        d = Date.now();
        this.scriptObj = vm.createScript(txt);
      }
      return this.scriptObj;
    };

    view.prototype._toJavaScript = function() {
      var c, d;
      if (!(this.javaScript != null)) {
        c = this._toCoffee();
        d = Date.now();
        try {
          this.javaScript = coffee.compile(c, {
            bare: false
          });
        } catch (e) {
          this.error = errorHandler.generateCompileToJsError(this, e);
        }
      }
      return this.javaScript;
    };

    view.prototype._toCoffee = function() {
      var d, res;
      if (!(this.coffeeScript != null)) {
        d = Date.now();
        res = this._coffeeHeaders();
        res += this._toCoffeeRecurse(this.codeObj, TAB_SPACES, 0)[0];
        res += this._coffeeFooters();
        this.coffeeScript = res;
      }
      return this.coffeeScript;
    };

    view.prototype._printLineNo = function(n, ind) {
      if ((this.lastLineNo != null) && (n === this.lastLineNo)) {
        return "";
      } else {
        this.lastLineNo = n;
        return "\n" + (this._space(ind)) + "__toffee.lineno = " + n;
      }
    };

    view.prototype._toCoffeeRecurse = function(obj, indent_level, indent_baseline) {
      var c, chunk, delta, i, i_delta, ind, item, lbreak, line, lineno, lines, part, res, s, t_int, temp_indent_level, zone_baseline, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      res = "";
      i_delta = 0;
      switch (obj[0]) {
        case "INDENTED_TOFFEE_ZONE":
          indent_level += TAB_SPACES;
          _ref = obj[1];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            _ref1 = this._toCoffeeRecurse(item, indent_level, indent_baseline), s = _ref1[0], delta = _ref1[1];
            res += s;
          }
          break;
        case "TOFFEE_ZONE":
          res += "\n" + (this._space(indent_level)) + "__toffee.state  = states.TOFFEE";
          _ref2 = obj[1];
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            item = _ref2[_j];
            _ref3 = this._toCoffeeRecurse(item, indent_level, indent_baseline), s = _ref3[0], delta = _ref3[1];
            res += s;
          }
          break;
        case "COFFEE_ZONE":
          res += "\n" + (this._space(indent_level)) + "__toffee.state = states.COFFEE";
          zone_baseline = this._getZoneBaseline(obj[1]);
          temp_indent_level = indent_level;
          _ref4 = obj[1];
          for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
            item = _ref4[_k];
            _ref5 = this._toCoffeeRecurse(item, temp_indent_level, zone_baseline), s = _ref5[0], delta = _ref5[1];
            res += s;
            temp_indent_level = indent_level + delta;
          }
          break;
        case "TOFFEE":
          ind = indent_level;
          res += "\n" + (this._space(ind)) + "__toffee.state = states.TOFFEE";
          t_int = utils.interpolateString(obj[1]);
          lineno = obj[2];
          for (_l = 0, _len3 = t_int.length; _l < _len3; _l++) {
            part = t_int[_l];
            if (part[0] === "TOKENS") {
              res += this._printLineNo(lineno, ind);
              chunk = "\#{escapeGrab(" + (part[1].replace(/^[\n \t]+/, '')) + ")}";
              res += "\n" + (this._space(ind)) + "__toffee.out.push " + (this._quoteStr(chunk));
              lineno += part[1].split("\n").length - 1;
            } else {
              lines = part[1].split("\n");
              for (i = _m = 0, _len4 = lines.length; _m < _len4; i = ++_m) {
                line = lines[i];
                res += this._printLineNo(lineno, ind);
                lbreak = i !== lines.length - 1 ? "\n" : "";
                chunk = this._escapeForStr("" + line + lbreak);
                if (chunk.length) {
                  res += "\n" + (this._space(ind)) + "__toffee.out.push " + (this._quoteStr(chunk + lbreak));
                }
                if (i < lines.length - 1) {
                  lineno++;
                }
              }
            }
          }
          res += this._printLineNo(obj[2] + (obj[1].split('\n').length - 1), ind);
          res += "\n" + (this._space(ind)) + "__toffee.state = states.COFFEE";
          break;
        case "COFFEE":
          c = obj[1];
          res += "\n" + (this._reindent(c, indent_level, indent_baseline));
          i_delta = this._getIndentationDelta(c, indent_baseline);
          break;
        default:
          throw "Bad parsing. " + obj + " not handled.";
          return ["", 0];
      }
      return [res, i_delta];
    };

    view.prototype._quoteStr = function(s) {
      /*
          returns a triple-quoted string, dividing into single quoted
          start and stops, if the string begins with double quotes, since
          coffee doesn't want to let us escape those.
      */

      var follow, lead, res;
      lead = "";
      follow = "";
      while (s.length && (s[0] === '"')) {
        s = s.slice(1);
        lead += '"';
      }
      while (s.length && (s.slice(-1) === '"')) {
        s = s.slice(0, -1);
        follow += '"';
      }
      res = '';
      if (lead.length) {
        res += "\'" + lead + "\' + ";
      }
      res += '"""' + s + '"""';
      if (follow.length) {
        res += "+ \'" + follow + "\'";
      }
      return res;
    };

    view.prototype._escapeForStr = function(s) {
      /*
          escapes a string so it can make it into coffeescript
          triple quotes without losing whitespace, etc.
      */
      s = s.replace(/\n/g, '\\n');
      s = s.replace(/\t/g, '\\t');
      return s;
    };

    view.prototype._getZoneBaseline = function(obj_arr) {
      var ib, obj, _i, _len;
      for (_i = 0, _len = obj_arr.length; _i < _len; _i++) {
        obj = obj_arr[_i];
        if (obj[0] === "COFFEE") {
          ib = this._getIndentationBaseline(obj[1]);
          if (ib != null) {
            return ib;
          }
        }
      }
      return 0;
    };

    view.prototype._getIndentationBaseline = function(coffee) {
      var i, line, lines, res, _i, _len;
      res = null;
      lines = coffee.split("\n");
      if (lines.length) {
        for (i = _i = 0, _len = lines.length; _i < _len; i = ++_i) {
          line = lines[i];
          if ((!line.match(/^[ ]*$/)) || i === (lines.length - 1)) {
            res = line.match(/[ ]*/)[0].length;
            break;
          }
        }
      }
      if (!(res != null)) {
        res = coffee.length;
      }
      return res;
    };

    view.prototype._getIndentationDelta = function(coffee, baseline) {
      /*
          given an arbitrarily indented set of coffeescript, returns the delta
          between the first and last lines, in chars.
          Ignores leading/trailing whitespace lines
          If passed a baseline, uses that instead of own.
      */

      var lines, res, y, y_l;
      if (!(baseline != null)) {
        baseline = this._getIndentationBaseline(coffee);
      }
      if (!(baseline != null)) {
        res = 0;
      } else {
        lines = coffee.split("\n");
        if (lines.length < 1) {
          res = 0;
        } else {
          y = lines[lines.length - 1];
          y_l = y.match(/[ ]*/)[0].length;
          res = y_l - baseline;
        }
      }
      return res;
    };

    view.prototype._reindent = function(coffee, indent_level, indent_baseline) {
      var indent, line, lines, res, rxx, strip;
      lines = coffee.split('\n');
      while (lines.length && lines[0].match(/^[ ]*$/)) {
        lines = lines.slice(1);
      }
      if (!lines.length) {
        return '';
      }
      rxx = /^[ ]*/;
      strip = indent_baseline;
      indent = this._space(indent_level);
      res = ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = lines.length; _i < _len; _i++) {
          line = lines[_i];
          _results.push("" + indent + line.slice(strip));
        }
        return _results;
      })()).join("\n");
      return res;
    };

    view.prototype._space = function(indent) {
      var i;
      return ((function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; 0 <= indent ? _i < indent : _i > indent; i = 0 <= indent ? ++_i : --_i) {
          _results.push(" ");
        }
        return _results;
      })()).join("");
    };

    view.prototype._tabAsSpaces = function() {
      var i;
      return ((function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; 0 <= TAB_SPACES ? _i < TAB_SPACES : _i > TAB_SPACES; i = 0 <= TAB_SPACES ? ++_i : --_i) {
          _results.push(" ");
        }
        return _results;
      })()).join("");
    };

    view.prototype._coffeeHeaders = function() {
      var ___;
      ___ = this._tabAsSpaces();
      return "domain                  = this\ndomain.toffeeTemplates  = domain.toffeeTemplates or {}\ndomain.toffeeTemplates[\"" + this.identifier + "\"] = (locals) ->\n" + ___ + "domain                = this\n" + ___ + "locals.__toffee       = {}\n" + ___ + "`with (locals) {`\n" + ___ + "__toffee.out = []\n\n" + ___ + "if not print?\n" + ___ + ___ + "print = (txt) -> \n" + ___ + ___ + ___ + "__toffee.out.push txt\n" + ___ + ___ + ___ + "''\n\n" + ___ + "raw = (o) ->\n" + ___ + ___ + "res = (\"\"+o)\n" + ___ + ___ + "if __toffee.state is states.COFFEE then return res else return [res, '__esc_override']\n\n" + ___ + "json = (o) ->\n" + ___ + ___ + "res = (\"\"+o)\n" + ___ + ___ + "if __toffee.state is states.COFFEE then return res else return [res, '__esc_override']\n\n" + ___ + "escHtml = (o) ->\n" + ___ + ___ + "res = (\"\"+o).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;')\n" + ___ + ___ + "if __toffee.state is states.COFFEE then return res else return [res, '__esc_override']\n\n" + ___ + "escapeGrab = (o) ->\n" + ___ + ___ + "if __toffee.noEscaping then return o\n" + ___ + ___ + "if (Array.isArray o) and (o.length > 1) and (o[1] is '__esc_override') then return o[0]\n" + ___ + ___ + "return escHtml(o)[0]\n" + ___ + "states = " + (JSON.stringify(states));
    };

    view.prototype._coffeeFooters = function() {
      var ___;
      ___ = this._tabAsSpaces();
      return "\n\n" + ___ + "__toffee.res = __toffee.out.join \"\"\n" + ___ + "return __toffee.res\n" + ___ + "`} /* closing JS 'with' */ `\n# sometimes we want to execute the whole thing in a sandbox\n# and just output results\nif __toffee_run_input?\n" + ___ + "return domain.toffeeTemplates[\"" + this.identifier + "\"] __toffee_run_input";
    };

    return view;

  })();

  exports.view = view;

  exports.expressCompile = function(txt, options) {
    var v;
    v = new view(txt, options);
    return function(vars) {
      var res;
      res = v.run(vars);
      if (res[0]) {
        return res[0];
      } else {
        return res[1];
      }
    };
  };

}).call(this);
