// Generated by CoffeeScript 1.3.3
(function() {
  var compile, fs, getCommonHeadersJs, getVersionNumber, path, program, recurseRun, run, view, _ref;

  fs = require('fs');

  path = require('path');

  _ref = require('../lib/view'), view = _ref.view, getCommonHeadersJs = _ref.getCommonHeadersJs;

  program = require('commander');

  getVersionNumber = function() {
    var o, p;
    p = fs.readFileSync("" + __dirname + "/../package.json", "utf8");
    o = JSON.parse(p);
    return o.version;
  };

  program.on('--help', function() {
    return console.log("\n  Examples:\n\n    toffee views               # recurses through views and builds views.js\n    toffee foo.toffee          # builds foo.js\n    toffee views -o templates  # builds templates.js\n    toffee -p foo.toffee       # outputs JS to stdout\n\n\n  Then use in your <html>:\n\n    <script src=\"views.js\"></script>\n    <script>\n       var pubvars   = { name: \"Hans Gruber\", criminal: true };\n       var some_html = toffee.render (\"views/layout.toffee\", pubvars);\n    </script>\n   ");
  });

  program.version(getVersionNumber()).option('-o, --output [path]', 'output file').option('-p, --print', 'print output to stdout').option('-m, --minimize', 'minimize output (ugly, smaller file)').option('-c, --coffee', 'output to CoffeeScript (not JS)').parse(process.argv);

  compile = function(start_path, path) {
    /*
      e.g., if start_path is /foo/bar
      and   path is /foo/bar/car/thing.toffee
    */

    var bundle_path, js, source, v;
    source = fs.readFileSync(path, 'utf8');
    bundle_path = path.slice(start_path.length);
    v = new view(source, {
      fileName: path,
      bundlePath: bundle_path,
      browserMode: true,
      minimize: (program.minimize != null) && program.minimize
    });
    js = v._toJavaScript();
    if (v.error) {
      process.stderr.write(v.error.getPrettyPrintText());
      process.exit(1);
    }
    return js;
  };

  recurseRun = function(start_path, curr_path, out_text) {
    var file, files, stats, sub_path, sub_stats, _i, _len;
    stats = fs.statSync(curr_path);
    if (stats.isDirectory()) {
      files = fs.readdirSync(curr_path);
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        sub_path = path.normalize("" + curr_path + "/" + file);
        if (file.match(/\.toffee$/)) {
          out_text = recurseRun(start_path, sub_path, out_text);
        } else if (!(file === '.' || file === '..')) {
          sub_stats = fs.statSync(sub_path);
          if (sub_stats.isDirectory()) {
            out_text = recurseRun(start_path, sub_path, out_text);
          }
        }
      }
    } else {
      out_text += "\n;\n" + compile(start_path, curr_path);
    }
    return out_text;
  };

  run = exports.run = function() {
    var out_text, start_path;
    if (program.args.length !== 1) {
      console.log("Unexpected input. toffee --help for examples");
      console.log(program.args);
      return process.exit(1);
    } else {
      try {
        start_path = fs.realpathSync(program.args[0]);
      } catch (e) {
        console.log("Input file/path not found. toffee --help for examples");
        process.exit(1);
      }
      start_path = path.normalize(start_path);
      out_text = "" + (getCommonHeadersJs(true, true)) + "\n;\n" + (recurseRun(start_path, start_path, ''));
      if (program.print) {
        console.log(out_text);
      }
      if (program.output) {
        try {
          console.log("Writing " + program.output);
          return fs.writeFileSync(program.output, out_text, "utf8");
        } catch (e) {
          console.log(e);
          return process.exit(1);
        }
      }
    }
  };

  if (require.main === module) {
    run();
  }

}).call(this);
