// Generated by CoffeeScript 1.3.3
(function() {
  var engine, fs, path, states, util, view,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  view = require('./view').view;

  states = require('./consts').states;

  fs = require('fs');

  path = require('path');

  util = require('util');

  engine = (function() {

    function engine(options) {
      this._fn_partial = __bind(this._fn_partial, this);

      this._fn_snippet = __bind(this._fn_snippet, this);

      this._inlineInclude = __bind(this._inlineInclude, this);

      this.run = __bind(this.run, this);
      options = options || {};
      this.maxCacheAge = options.maxCacheAge || 2000;
      this.verbose = options.verbose || false;
      this.prettyPrintErrors = options.prettyPrintErrors ? options.prettyPrintErrors : true;
      this.viewCache = {};
      this.lastCacheReset = Date.now();
    }

    engine.prototype._log = function(o) {
      var _ref;
      if (this.verbose) {
        if ((_ref = typeof o) === "string" || _ref === "number" || _ref === "boolean") {
          return console.log("toffee: " + o);
        } else {
          return console.log("toffee: " + (util.inspect(o)));
        }
      }
    };

    engine.prototype.run = function(filename, options, cb) {
      /*
          "options" contains the pub vars
          may also contain special items:
            __dir: path to look relative to
            layout: path to a template expecting a body var (express 2.x style, but for use with express 3.x)
      */

      var err, res, _ref, _ref1, _ref2, _ref3;
      _ref = this.runSync(filename, options), err = _ref[0], res = _ref[1];
      if (err && this.prettyPrintErrors) {
        _ref1 = [null, err], err = _ref1[0], res = _ref1[1];
      }
      if ((!err) && (options != null ? options.layout : void 0)) {
        options.body = res;
        _ref2 = this.runSync(options.layout, options), err = _ref2[0], res = _ref2[1];
        if (err && this.prettyPrintErrors) {
          _ref3 = [null, err], err = _ref3[0], res = _ref3[1];
        }
      }
      return cb(err, res);
    };

    engine.prototype.runSync = function(filename, options) {
      /*
          returns [err, res];
          "options" the same as run() above
      */

      var err, pwd, realpath, res, start_time, v, _ref, _ref1,
        _this = this;
      start_time = Date.now();
      options = options || {};
      options.__dir = options.__dir || process.cwd();
      if (filename.slice(0, 2) === "./") {
        filename = filename.slice(2);
      }
      if (filename[0] !== "/") {
        filename = "" + options.__dir + "/" + filename;
      }
      realpath = filename;
      pwd = path.dirname(realpath);
      if (Date.now() - this.lastCacheReset > this.maxCacheAge) {
        this._resetCache();
      }
      v = this.viewCache[realpath] || this._loadAndCache(realpath, options);
      if (v) {
        options.__parent = realpath;
        options.partial = options.partial || function(fname, lvars) {
          return _this._fn_partial(fname, lvars, realpath, options);
        };
        options.snippet = options.snippet || function(fname, lvars) {
          return _this._fn_snippet(fname, lvars, realpath, options);
        };
        options.print = options.print || function(txt) {
          return _this._fn_print(txt, options);
        };
        if (!(options.console != null)) {
          options.console = {
            log: console.log
          };
        }
        _ref = v.run(options), err = _ref[0], res = _ref[1];
      } else {
        _ref1 = ["Couldn't load " + filename, null], err = _ref1[0], res = _ref1[1];
      }
      this._log("" + filename + " run in " + (Date.now() - start_time) + "ms");
      return [err, res];
    };

    engine.prototype._inlineInclude = function(filename, local_vars, parent_realpath, parent_options) {
      var err, k, options, res, v, _ref;
      options = local_vars || {};
      options.__dir = path.dirname(parent_realpath);
      options.__parent = parent_realpath;
      if (!options.__no_inheritance) {
        for (k in parent_options) {
          v = parent_options[k];
          if (!((local_vars != null ? local_vars[k] : void 0) != null)) {
            if (k.slice(0, 2) !== "__") {
              if (!(k === "print" || k === "partial" || k === "snippet")) {
                options[k] = v;
              }
            }
          }
        }
      }
      _ref = this.runSync(filename, options), err = _ref[0], res = _ref[1];
      return err || res;
    };

    engine.prototype._fn_snippet = function(fname, lvars, realpath, options) {
      lvars = lvars != null ? lvars : {};
      lvars.__no_inheritance = true;
      return this._inlineInclude(fname, lvars, realpath, options);
    };

    engine.prototype._fn_partial = function(fname, lvars, realpath, options) {
      return this._inlineInclude(fname, lvars, realpath, options);
    };

    engine.prototype._fn_print = function(txt, options) {
      return options.__toffee.out.push(txt);
    };

    engine.prototype._loadAndCache = function(filename, options) {
      var txt, v;
      try {
        txt = fs.readFileSync(filename, 'utf-8');
      } catch (e) {
        txt = "Error: Could not read " + filename;
        if (options.__parent != null) {
          txt += " requested in " + options.__parent;
        }
      }
      v = new view(txt, {
        fileName: filename,
        verbose: this.verbose
      });
      this.viewCache[filename] = v;
      return v;
    };

    engine.prototype._resetCache = function() {
      this.viewCache = {};
      return this.lastCacheReset = Date.now();
    };

    return engine;

  })();

  exports.engine = engine;

}).call(this);
