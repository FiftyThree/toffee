// Generated by CoffeeScript 1.3.3
(function() {
  var engine, fs, path, states, util, view,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  view = require('./view').view;

  states = require('./consts').states;

  fs = require('fs');

  path = require('path');

  util = require('util');

  engine = (function() {

    function engine(options) {
      this._inlineInclude = __bind(this._inlineInclude, this);

      this.run = __bind(this.run, this);
      options = options || {};
      this.maxCacheAge = options.maxCacheAge || 2000;
      this.viewCache = {};
      this.lastCacheReset = Date.now();
    }

    engine.prototype.run = function(filename, options, cb) {
      /*
          "options" contains the pub vars
          may also contain special items:
            __dir: path to look relative to
      */

      var err, res, _ref;
      _ref = this.runSync(filename, options), err = _ref[0], res = _ref[1];
      return cb(err, res);
    };

    engine.prototype.runSync = function(filename, options) {
      /*
          returns [err, res];
          "options" the same as run() above
      */

      var err, pwd, realpath, res, v, _ref,
        _this = this;
      options = options || {};
      options.__dir = options.__dir || process.cwd();
      if (filename.charAt(0) !== "/") {
        filename = "" + options.__dir + "/" + filename;
      }
      realpath = filename;
      pwd = path.dirname(realpath);
      if (Date.now() - this.lastCacheReset > this.maxCacheAge) {
        this._resetCache();
      }
      v = this.viewCache[filename] || this._loadAndCache(filename, options);
      if (v) {
        options.__parent = filename;
        options.include = options.include || function(fname, lvars) {
          return _this._fn_include(fname, lvars, realpath, options);
        };
        options.partial = options.partial || function(fname, lvars) {
          return _this._fn_partial(fname, lvars, realpath, options);
        };
        options.print = options.print || function(txt) {
          return _this._fn_print(txt, options);
        };
        _ref = v.run(options), err = _ref[0], res = _ref[1];
        return [err, res];
      } else {
        return ["Couldn't load " + filename, null];
      }
    };

    engine.prototype._inlineInclude = function(filename, local_vars, parent_realpath, parent_options) {
      var err, k, local_keys, options, res, v, _ref;
      local_keys = {};
      for (k in local_vars) {
        local_keys[k] = true;
      }
      options = local_vars || {};
      options.__dir = path.dirname(parent_realpath);
      options.__parent = parent_realpath;
      for (k in parent_options) {
        v = parent_options[k];
        if ((k.slice(0, 2) !== "__") && !(local_keys[k] != null)) {
          options[k] = v;
        }
      }
      _ref = this.runSync(filename, options), err = _ref[0], res = _ref[1];
      if (err) {
        return err;
      } else {
        return res;
      }
    };

    engine.prototype._fn_include = function(fname, lvars, realpath, options) {
      var res;
      res = this._inlineInclude(fname, lvars, realpath, options);
      if (options.__toffee.state === states.COFFEE) {
        return this._fn_print(res, options);
      } else {
        return res;
      }
    };

    engine.prototype._fn_partial = function(fname, lvars, realpath, options) {
      return this._inlineInclude(fname, lvars, realpath, options);
    };

    engine.prototype._fn_print = function(txt, options) {
      return options.__toffee.out.push(txt);
    };

    engine.prototype._loadAndCache = function(filename, options) {
      var txt, v;
      try {
        txt = fs.readFileSync(filename, 'utf-8');
      } catch (e) {
        txt = "Error: Could not read " + filename;
        if (options.__parent != null) {
          txt += " requested in " + options.__parent;
        }
      }
      v = new view(txt, {
        fileName: filename
      });
      this.viewCache[filename] = v;
      return v;
    };

    engine.prototype._resetCache = function() {
      this.viewCache = {};
      return this.lastCacheReset = Date.now();
    };

    return engine;

  })();

  exports.engine = engine;

}).call(this);
