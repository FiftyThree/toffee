// Generated by IcedCoffeeScript 1.3.3a
(function() {
  var engine, fs, path, view,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  view = require('./view').view;

  fs = require('fs');

  path = require('path');

  engine = (function() {

    function engine(options) {
      this._inlineInclude = __bind(this._inlineInclude, this);
      this.viewCache = {};
      this.lastCacheReset = Date.now();
      this.maxCacheAge = 1000;
    }

    engine.prototype.run = function(filename, options, cb) {
      /*
          "options" contains the pub vars
          may also contain special items:
            __dir: path to look relative to
      */

      var err, res, _ref;
      _ref = this.runSync(filename, options), err = _ref[0], res = _ref[1];
      return cb(err, res);
    };

    engine.prototype.runSync = function(filename, options) {
      /*
          returns [err, res];
          "options" the same as run() above
      */

      var pwd, realpath, res, v, view_options,
        _this = this;
      options = options || {};
      options.__dir = options.__dir || process.cwd();
      filename = "" + options.__dir + "/" + filename;
      realpath = fs.realpathSync(filename);
      pwd = path.dirname(realpath);
      if (Date.now() - this.lastCacheReset > this.maxCacheAge) this._resetCache();
      if (this.viewCache[filename] != null) {
        v = this.viewCache[filename];
      } else {
        v = this._loadAndCache(filename);
      }
      if (v) {
        view_options = {
          include_fn: function(filename, lvars) {
            return _this._inlineInclude(filename, lvars, pwd);
          },
          filename: filename,
          pwd: pwd
        };
        res = v.run(options, view_options);
        return [null, res];
      } else {
        return ["Couldn't load " + filename, null];
      }
    };

    engine.prototype._inlineInclude = function(filename, local_vars, dir) {
      var err, options, res, _ref;
      options = local_vars || {};
      options.__dir = dir;
      _ref = this.runSync(filename, options), err = _ref[0], res = _ref[1];
      if (err) {
        return err;
      } else {
        return res;
      }
    };

    engine.prototype._loadAndCache = function(filename) {
      var txt, v;
      txt = fs.readFileSync(filename, 'utf-8');
      if (txt) {
        v = new view(txt);
        this.viewCache[filename] = v;
        return v;
      } else {
        console.log("Couldn't load " + filename + ".");
        return null;
      }
    };

    engine.prototype._resetCache = function() {
      this.viewCache = {};
      return this.lastCacheReset = Date.now();
    };

    return engine;

  })();

  exports.engine = engine;

}).call(this);
