// Generated by IcedCoffeeScript 1.3.3a
(function() {
  var TAB_SPACES, coffee, parser, view, vm;

  parser = require('./cojo_lang').parser;

  coffee = require('coffee-script');

  vm = require('vm');

  TAB_SPACES = 2;

  view = (function() {

    function view(txt) {
      this.codeObj = null;
      this.coffeeScript = null;
      this.javaScript = null;
      this.scriptObj = null;
      this.loadFromText(txt);
    }

    view.prototype.loadFromText = function(txt) {
      this.txt = txt;
      this.codeObj = parser.parse(txt);
      this._cleanTabs();
      console.log(" =====txt=======");
      console.log(this.txt);
      console.log(" =====code=======");
      console.log(this.codeObj);
      return console.log(" ============");
    };

    view.prototype._cleanTabs = function() {
      var chunk, i, tab, _i, _len, _ref, _results;
      tab = this._tabAsSpaces();
      _ref = this.codeObj;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        chunk = _ref[i];
        if (chunk[0] === 'COFFEE') {
          _results.push(chunk[1] = chunk[1].replace(/\t/g, tab));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    view.prototype.run = function(vars, options) {
      /*
          returns [err, str]
      */

      var err, fn, name, res, script, _ref;
      script = this._toScriptObj();
      vars.__cojo__ = {
        res: ""
      };
      err = null;
      if (options.prebuilt_functions != null) {
        _ref = options.prebuilt_functions;
        for (name in _ref) {
          fn = _ref[name];
          vars[name] = fn;
        }
      }
      try {
        script.runInNewContext(vars);
        res = vars.__cojo__.res;
        delete vars.__cojo__;
      } catch (e) {
        err = "Error: " + e.message;
        err += "\nStack: " + e.stack;
      }
      return [err, res];
    };

    view.prototype._toScriptObj = function() {
      var d, txt;
      if (!(this.scriptObj != null)) {
        txt = this._toJavascript();
        d = Date.now();
        this.scriptObj = vm.createScript(txt);
        console.log("Compiled to ScriptObj in " + (Date.now() - d) + "ms");
      }
      return this.scriptObj;
    };

    view.prototype._toJavascript = function() {
      var c, d;
      if (!(this.javaScript != null)) {
        c = this._toCoffee();
        d = Date.now();
        this.javaScript = coffee.compile(c, {
          bare: false
        });
        console.log("Compiled to JavaScript in " + (Date.now() - d) + "ms");
      }
      return this.javaScript;
    };

    view.prototype._toCoffee = function() {
      var chunk, d, i, i_delta, indent_baseline_stack, indent_stack, res, _i, _len, _ref;
      if (!(this.coffeeScript != null)) {
        d = Date.now();
        indent_stack = [0];
        indent_baseline_stack = [];
        res = this._coffeeHeaders();
        _ref = this.codeObj;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          chunk = _ref[i];
          switch (chunk[0]) {
            case 'COFFEE_REGION':
              indent_baseline_stack.push(this._getIndentationBaseline(this.codeObj[i + 1][1]));
              break;
            case 'END_COFFEE_REGION':
              indent_baseline_stack.pop();
              break;
            case 'COJO':
              res += "\n" + (this._space(indent_stack)) + "__cojo__.state = \"COJO\"";
              res += ("\n" + (this._space(indent_stack)) + "__cojo__.res += ") + '"""' + chunk[1] + '"""';
              res += "\n" + (this._space(indent_stack)) + "__cojo__.state = \"COFFEE\"";
              indent_stack.pop();
              break;
            case 'COFFEE':
              if (i === 0) {
                res += "\n" + (this._space(indent_stack)) + "__cojo__.state = \"COFFEE\"";
              }
              res += "\n" + (this._reindent(chunk[1], indent_stack, indent_baseline_stack));
              i_delta = this._getIndentationDelta(chunk[1]);
              indent_stack.push(i_delta);
              break;
            case 'INDENT':
              indent_stack.push(TAB_SPACES);
              break;
            case 'OUTDENT':
              indent_stack.pop();
              break;
            default:
              throw 'Bad parsing.';
          }
        }
        res += this._coffeeFooters();
        this.coffeeScript = res;
        console.log(res);
        console.log("Compiled to CoffeeScript in " + (Date.now() - d) + "ms");
      }
      return this.coffeeScript;
    };

    view.prototype._getIndentationBaseline = function(coffee) {
      var line, lines, _i, _len;
      lines = coffee.split("\n");
      if (lines.length === 0) return "";
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        if (!line.match(/^[\W]*$/)) return line.match(/[\W]*/)[0];
      }
      return "";
    };

    view.prototype._getIndentationDelta = function(coffee) {
      /*
          given an arbitrarily indented set of coffeescript, returns the delta
          between the first and last lines, in chars.
          Ignores leading/trailing whitespace lines
      */

      var lines, res, x, x_l, y, y_l;
      lines = coffee.split("\n");
      while (lines.length && lines[0].match(/^[\W]*$/)) {
        lines.splice(0, 1);
      }
      while (lines.length && lines[lines.length - 1].match(/^[\W]*$/)) {
        lines.pop();
      }
      if (lines.length < 2) return 0;
      x = lines[0];
      y = lines[lines.length - 1];
      x_l = x.match(/[\W]*/)[0].length;
      y_l = y.match(/[\W]*/)[0].length;
      res = y_l - x_l;
      return res;
    };

    view.prototype._reindent = function(coffee, indent_stack, indent_baseline_stack) {
      var indent, line, lines, res, rxx, strip;
      lines = coffee.split('\n');
      while (lines.length && lines[0].match(/^[\W]*$/)) {
        lines = lines.slice(1);
      }
      if (!lines.length) return '';
      rxx = /^[\W]*/;
      strip = indent_baseline_stack[indent_baseline_stack.length - 1].length;
      indent = this._space(indent_stack);
      res = ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = lines.length; _i < _len; _i++) {
          line = lines[_i];
          _results.push("" + indent + line.slice(strip));
        }
        return _results;
      })()).join("\n");
      return res;
    };

    view.prototype._space = function(indent_stack) {
      var i, sum, x, _i, _len;
      sum = 0;
      for (_i = 0, _len = indent_stack.length; _i < _len; _i++) {
        x = indent_stack[_i];
        sum += x;
      }
      return ((function() {
        var _j, _results;
        _results = [];
        for (i = _j = 0; 0 <= sum ? _j < sum : _j > sum; i = 0 <= sum ? ++_j : --_j) {
          _results.push(" ");
        }
        return _results;
      })()).join("");
    };

    view.prototype._tabAsSpaces = function() {
      var i;
      return ((function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; 0 <= TAB_SPACES ? _i < TAB_SPACES : _i > TAB_SPACES; i = 0 <= TAB_SPACES ? ++_i : --_i) {
          _results.push(" ");
        }
        return _results;
      })()).join("");
    };

    view.prototype._coffeeHeaders = function() {
      var header;
      header = "__cojo__.state = \"COJO\"";
      return header;
    };

    view.prototype._coffeeFooters = function() {
      var footer;
      footer = "";
      return footer;
    };

    return view;

  })();

  exports.view = view;

}).call(this);
